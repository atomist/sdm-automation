type PolicyLog @rootType {
  type: String
  name: String

  manage: ManageTargetPolicyLog
  apply: ApplyPolicyLog
  subscribe(org: String, repo: String branch: String): ManageSubscriptionPolicyLog

  ts: Int
}

type ManageSubscriptionPolicyLog {
  action: ManageSubscriptionPolicyAction

  streamId: ID
  streamName: String

  owner: String
  repo: String
  branch: String

  reason: String
  author: String

  targetSha: String
  targetValue: String
}

enum ManageSubscriptionPolicyAction {
  subscribe
  unsubscribe

  ignore
  unignore
}

type ManageTargetPolicyLog {
  action: ManageTargetPolicyAction
  reason: String
  author: String
  targetSha: String
  targetValue: String

  streamId: ID
  streamName: String
}

enum ManageTargetPolicyAction {
  set
  unset
}

type ApplyPolicyLog {
  _sha: String
  commit: Commit
    @linkTo(
      queryName: "commitBySha"
      variables: [{ name: "sha", path: "$._sha" }]
    )

  _prId: ID
  pullRequest: PullRequest
    @linkTo(
      queryName: "pullRequestById"
      variables: [{ name: "id", path: "$._prId" }]
    )

  state: ApplyPolicyState

  branch: String
  targetSha: String

  message: String
}

enum ApplyPolicyState {
  success
  failure
  no_change
}
