type SdmGoal @rootType {
  environment: String @compositeId
  name: String
  uniqueName: String @compositeId

  sha: String
  branch: String

  repo(name: [String], owner: [String], providerId: [String]): SdmRepository

  fulfillment(name: [String], method: [String]): SdmGoalFulfillment

  description: String
  url: String
  externalUrl: String # deprecated, use externalUrls
  externalUrls: [SdmExternalUrl]
  goalSet: String
  goalSetId: String @compositeId
  state: SdmGoalState @compositeId
  phase: String @compositeId
  ts: Int
  version: Int @compositeId

  error: String
  retryFeasible: Boolean

  approval: SdmProvenance
  approvalRequired: Boolean

  preApproval: SdmProvenance
  preApprovalRequired: Boolean

  provenance(registration: [String]): [SdmProvenance]

  preConditions: [SdmCondition]

  externalKey: String

  data: String

  signature: String

  # JSON serialized parameters
  parameters: String

  # Persisted descriptions for this goal as it moves through the phases
  descriptions: SdmGoalDescriptions

  push: Push
    @linkTo(
      queryName: "pushBySha"
      variables: [
        { name: "afterSha", path: "$.sha" }
        { name: "branchName", path: "$.branch" }
        { name: "ownerName", path: "$.repo.owner" }
        { name: "repoName", path: "$.repo.name" }
      ]
    )
    @linkFrom(
      field: { kind: LIST, name: "goals" }
      query: "query goals($sha: String!, $branch: String!, $owner: String!, $repo: String!) { SdmGoal(sha: [$sha], branch: [$branch], _first: 500) { id repo (name: [$repo], owner: [$owner]) @required { name } } }"
      variables: [
        { name: "sha", path: "$.after.sha" }
        { name: "branch", path: "$.branch" }
        { name: "owner", path: "$.repo.owner" }
        { name: "repo", path: "$.repo.name" }
      ]
    )
}

type SdmExternalUrl {
  label: String
  url: String
}

type SdmRepository {
  name: String
  owner: String
  providerId: String
}

type SdmGoalFulfillment {
  method: String
  name: String
}

type SdmProvenance {
  correlationId: String
  registration: String
  version: String
  name: String
  ts: Int

  userId: String
  channelId: String
}

type SdmCondition {
  environment: String
  name: String
  uniqueName: String
}

enum SdmGoalState {
  planned
  waiting_for_pre_approval
  pre_approved
  requested
  in_process
  waiting_for_approval
  approved
  success
  failure
  canceled
  stopped
  skipped
}

type SdmGoalDescriptions {
  planned: String
  requested: String
  completed: String
  inProcess: String
  failed: String
  waitingForApproval: String
  waitingForPreApproval: String
  canceled: String
  stopped: String
  skipped: String
}
